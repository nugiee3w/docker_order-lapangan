services:
  # Order Service
  order-service:
    build: 
      context: ./order-service
      dockerfile: Dockerfile
    container_name: order-service
    ports:
      - "${ORDER_SERVICE_PORT}:80"
    environment:
      - APP_NAME=${ORDER_APP_NAME}
      - APP_ENV=${ORDER_APP_ENV}
      - APP_DEBUG=${ORDER_APP_DEBUG}
      - APP_KEY=${ORDER_APP_KEY}
      - APP_URL=${ORDER_APP_URL}
      - DB_CONNECTION=${ORDER_DB_CONNECTION}
      - DB_HOST=${ORDER_DB_HOST}
      - DB_PORT=${ORDER_DB_PORT}
      - DB_DATABASE=${ORDER_DB_DATABASE}
      - DB_USERNAME=${ORDER_DB_USERNAME}
      - DB_PASSWORD=${ORDER_DB_PASSWORD}
      - LAPANGAN_SERVICE_URL=${LAPANGAN_SERVICE_URL}
    volumes:
      - order-storage:/var/www/html/storage
      - order-bootstrap-cache:/var/www/html/bootstrap/cache
    networks:
      - app-network
    depends_on:
      order-db:
        condition: service_healthy
    restart: unless-stopped

  # Lapangan Service
  lapangan-service:
    build: 
      context: ./lapangan-service
      dockerfile: Dockerfile
    container_name: lapangan-service
    ports:
      - "${LAPANGAN_SERVICE_PORT}:80"
    environment:
      - APP_NAME=${LAPANGAN_APP_NAME}
      - APP_ENV=${LAPANGAN_APP_ENV}
      - APP_DEBUG=${LAPANGAN_APP_DEBUG}
      - APP_KEY=${LAPANGAN_APP_KEY}
      - APP_URL=${LAPANGAN_APP_URL}
      - DB_CONNECTION=${LAPANGAN_DB_CONNECTION}
      - DB_HOST=${LAPANGAN_DB_HOST}
      - DB_PORT=${LAPANGAN_DB_PORT}
      - DB_DATABASE=${LAPANGAN_DB_DATABASE}
      - DB_USERNAME=${LAPANGAN_DB_USERNAME}
      - DB_PASSWORD=${LAPANGAN_DB_PASSWORD}
      - ORDER_SERVICE_URL=${ORDER_SERVICE_URL}
    volumes:
      - lapangan-storage:/var/www/html/storage
      - lapangan-bootstrap-cache:/var/www/html/bootstrap/cache
    networks:
      - app-network
    depends_on:
      lapangan-db:
        condition: service_healthy
    restart: unless-stopped

  # Order Service Database
  order-db:
    image: mysql:8.0
    container_name: order-db
    environment:
      MYSQL_DATABASE: ${ORDER_DB_DATABASE}
      MYSQL_USER: ${ORDER_DB_USERNAME}
      MYSQL_PASSWORD: ${ORDER_DB_PASSWORD}
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
      MYSQL_ROOT_PASSWORD: ${ORDER_DB_ROOT_PASSWORD}
    volumes:
      - order-db-data:/var/lib/mysql
      - ./order-service/database/mysql-init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network
    ports:
      - "${ORDER_DB_EXTERNAL_PORT}:3306"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "order_user"]
      timeout: 20s
      retries: 10
    command: --default-authentication-plugin=mysql_native_password

  # Lapangan Service Database
  lapangan-db:
    image: mysql:8.0
    container_name: lapangan-db
    environment:
      MYSQL_DATABASE: ${LAPANGAN_DB_DATABASE}
      MYSQL_USER: ${LAPANGAN_DB_USERNAME}
      MYSQL_PASSWORD: ${LAPANGAN_DB_PASSWORD}
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
      MYSQL_ROOT_PASSWORD: ${LAPANGAN_DB_ROOT_PASSWORD} 
    volumes:
      - lapangan-db-data:/var/lib/mysql
      - ./lapangan-service/database/mysql-init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network
    ports:
      - "${LAPANGAN_DB_EXTERNAL_PORT}:3306"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "lapangan_user"]
      timeout: 20s
      retries: 10
    command: --default-authentication-plugin=mysql_native_password

volumes:
  order-db-data:
  lapangan-db-data:
  order-storage:
  lapangan-storage:
  order-bootstrap-cache:
  lapangan-bootstrap-cache:

networks:
  app-network:
    driver: bridge
